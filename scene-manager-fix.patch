diff --git a/create_repo_package.sh b/create_repo_package.sh
deleted file mode 100755
index 48b74a3..0000000
--- a/create_repo_package.sh
+++ /dev/null
@@ -1,217 +0,0 @@
-#!/bin/bash
-
-set -e
-
-BASE_DIR="repo_package"
-
-echo "Creating repo_package folder with fresh REAPER source files..."
-
-mkdir -p $BASE_DIR/public
-mkdir -p $BASE_DIR/src/pages
-mkdir -p $BASE_DIR/src
-
-cat > $BASE_DIR/package.json << 'EOF'
-{
-  "name": "reaper-dashboard",
-  "version": "1.0.0",
-  "private": true,
-  "dependencies": {
-    "react": "^18.2.0",
-    "react-dom": "^18.2.0",
-    "react-router-dom": "^6.3.0",
-    "react-scripts": "5.0.1",
-    "zustand": "^4.3.5"
-  },
-  "scripts": {
-    "start": "react-scripts start",
-    "build": "react-scripts build"
-  },
-  "devDependencies": {
-    "tailwindcss": "^3.3.2",
-    "autoprefixer": "^10.4.14",
-    "postcss": "^8.4.21"
-  }
-}
-EOF
-
-cat > $BASE_DIR/tailwind.config.js << 'EOF'
-module.exports = {
-  content: ["./src/**/*.{js,jsx,ts,tsx}"],
-  theme: {
-    extend: {
-      colors: {
-        parchment: '#f3f0e7',
-        ink: '#1a1a1a',
-        soul: '#2e3142',
-      },
-    },
-  },
-  plugins: [],
-}
-EOF
-
-cat > $BASE_DIR/postcss.config.js << 'EOF'
-module.exports = {
-  plugins: {
-    tailwindcss: {},
-    autoprefixer: {},
-  },
-}
-EOF
-
-cat > $BASE_DIR/.gitignore << 'EOF'
-node_modules/
-build/
-.env
-.DS_Store
-EOF
-
-cat > $BASE_DIR/public/index.html << 'EOF'
-<!DOCTYPE html>
-<html lang="en">
-  <head>
-    <meta charset="utf-8" />
-    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
-    <meta name="viewport" content="width=device-width, initial-scale=1" />
-    <meta name="theme-color" content="#000000" />
-    <title>REAPER Dashboard</title>
-  </head>
-  <body class="bg-parchment text-ink">
-    <noscript>You need to enable JavaScript to run this app.</noscript>
-    <div id="root"></div>
-  </body>
-</html>
-EOF
-
-cat > $BASE_DIR/src/index.js << 'EOF'
-import React from 'react';
-import ReactDOM from 'react-dom/client';
-import './index.css';
-import App from './App';
-
-const root = ReactDOM.createRoot(document.getElementById('root'));
-root.render(
-  <React.StrictMode>
-    <App />
-  </React.StrictMode>
-);
-EOF
-
-cat > $BASE_DIR/src/index.css << 'EOF'
-@tailwind base;
-@tailwind components;
-@tailwind utilities;
-EOF
-
-cat > $BASE_DIR/src/App.jsx << 'EOF'
-import React from 'react';
-import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
-import CampaignDashboard from './pages/CampaignDashboard';
-import SceneManager from './pages/SceneManager';
-import CombatTracker from './pages/CombatTracker';
-
-function App() {
-  return (
-    <Router>
-      <div className="bg-parchment min-h-screen text-ink">
-        <nav className="bg-ink text-parchment p-4">
-          <ul className="flex gap-6">
-            <li><Link to="/" className="hover:underline">Dashboard</Link></li>
-            <li><Link to="/scene" className="hover:underline">Scene Manager</Link></li>
-            <li><Link to="/combat" className="hover:underline">Combat Tracker</Link></li>
-          </ul>
-        </nav>
-
-        <main className="p-6">
-          <Routes>
-            <Route path="/" element={<CampaignDashboard />} />
-            <Route path="/scene" element={<SceneManager />} />
-            <Route path="/combat" element={<CombatTracker />} />
-          </Routes>
-        </main>
-      </div>
-    </Router>
-  );
-}
-
-export default App;
-EOF
-
-cat > $BASE_DIR/src/pages/CampaignDashboard.jsx << 'EOF'
-import React from 'react';
-
-const CampaignDashboard = () => {
-  return (
-    <div className="bg-parchment text-ink p-6 min-h-screen">
-      <h1 className="text-4xl font-extrabold tracking-tight">REAPER: Campaign Dashboard</h1>
-      <p className="mt-2 text-lg italic">Because death is only the beginning of your session prep.</p>
-
-      <div className="mt-8 grid gap-6 md:grid-cols-2">
-        <section className="p-4 bg-white/80 border border-ink rounded-lg shadow">
-          <h2 className="text-2xl font-semibold">üìú Active Chapter</h2>
-          <p className="mt-2">Chapter 4: Shadow of War</p>
-          <p className="text-sm text-gray-700">Location: Kalaman | Party Level: 4</p>
-        </section>
-
-        <section className="p-4 bg-white/80 border border-ink rounded-lg shadow">
-          <h2 className="text-2xl font-semibold">üß† Plot Threads</h2>
-          <ul className="mt-2 list-disc list-inside text-sm">
-            <li>‚òëÔ∏è Vogler evacuated</li>
-            <li>‚¨ú Red Dragon Army scouts spotted</li>
-            <li>‚¨ú Retake Wheelwatch Outpost</li>
-            <li>‚¨ú Zanas Sarlamir encountered</li>
-          </ul>
-        </section>
-
-        <section className="p-4 bg-white/80 border border-ink rounded-lg shadow md:col-span-2">
-          <h2 className="text-2xl font-semibold">üßô NPCs in Play</h2>
-          <p className="mt-2">Darrett Highwater, Kalaman Officers, Refugee Leaders</p>
-        </section>
-      </div>
-    </div>
-  );
-};
-
-export default CampaignDashboard;
-EOF
-
-cat > $BASE_DIR/src/pages/SceneManager.jsx << 'EOF'
-import React from 'react';
-
-const SceneManager = () => {
-  return (
-    <div className="bg-parchment text-ink p-6 min-h-screen">
-      <h1 className="text-4xl font-bold">üé≠ Scene Manager</h1>
-      <p className="mt-2 text-lg italic">Direct the drama. Or rewrite the whole script when they burn the town down.</p>
-
-      <div className="mt-6">
-        <p className="text-sm text-gray-700">Scene list coming soon...</p>
-      </div>
-    </div>
-  );
-};
-
-export default SceneManager;
-EOF
-
-cat > $BASE_DIR/src/pages/CombatTracker.jsx << 'EOF'
-import React from 'react';
-
-const CombatTracker = () => {
-  return (
-    <div className="bg-parchment text-ink p-6 min-h-screen">
-      <h1 className="text-4xl font-bold">‚öîÔ∏è Combat Tracker</h1>
-      <p className="mt-2 text-lg italic">Keep it fair, keep it brutal. Or just fudge the dice like a god.</p>
-
-      <div className="mt-6">
-        <p className="text-sm text-gray-700">Combat tracker UI coming soon...</p>
-      </div>
-    </div>
-  );
-};
-
-export default CombatTracker;
-EOF
-
-echo "All files created successfully in $BASE_DIR."
-
diff --git a/map-assign-sync.patch b/map-assign-sync.patch
deleted file mode 100644
index bde73f0..0000000
--- a/map-assign-sync.patch
+++ /dev/null
@@ -1,443 +0,0 @@
-diff --git a/src/store/dmModuleStore.js b/src/store/dmModuleStore.js
-index abcdef1..1234567 100644
---- a/src/store/dmModuleStore.js
-+++ b/src/store/dmModuleStore.js
-@@ -1,41 +1,58 @@
- import create from 'zustand';
-
- const STORAGE_KEY = 'reaper_dmModule';
-
- const loadState = () => {
--  try {
--    const serialized = localStorage.getItem(STORAGE_KEY);
--    if (!serialized) return null;
--    return JSON.parse(serialized);
--  } catch {
--    return null;
--  }
-+  try {
-+    const serialized = localStorage.getItem(STORAGE_KEY);
-+    if (!serialized) return null;
-+    return JSON.parse(serialized);
-+  } catch {
-+    return null;
-+  }
- };
-
--const initialState = loadState() || {
--  campaignNotes: '',
--  sceneNotes: {},
--  combatNotes: {},
--  chapterInfo: {
--    title: 'Chapter 4: The War-torn Town of Kalaman',
--    summary: `The adventurers arrive at Kalaman, a town ravaged by conflict. The party must navigate
--alliances, scout enemy movements, and prepare for the looming battle ahead.`,
--    flavorText: `‚ÄúIn the smoke-filled streets, every shadow hides a secret, and every ally might be a foe.‚Äù`,
--  },
--  sceneMapAssignments: {},
--};
-+const initialState = loadState() || {
-+  campaignNotes: '',
-+  sceneNotes: {},
-+  combatNotes: {},
-+  chapterInfo: {
-+    title: 'Chapter 4: The War-torn Town of Kalaman',
-+    summary: `The adventurers arrive at Kalaman, a town ravaged by conflict. The party must navigate
-+alliances, scout enemy movements, and prepare for the looming battle ahead.`,
-+    flavorText: `‚ÄúIn the smoke-filled streets, every shadow hides a secret, and every ally might be a foe.‚Äù`,
-+  },
-+  sceneMapAssignments: {},
-+  availableMaps: [], // NEW: all uploaded maps urls
-+};
-
- const useDmModuleStore = create((set, get) => ({
--  ...initialState,
--
--  setCampaignNotes: (notes) => {
--    set({ campaignNotes: notes });
--    saveState({ ...get(), campaignNotes: notes });
--  },
--
--  setSceneNotes: (sceneId, notes) => {
--    const newSceneNotes = { ...get().sceneNotes, [sceneId]: notes };
--    set({ sceneNotes: newSceneNotes });
--    saveState({ ...get(), sceneNotes: newSceneNotes });
--  },
--
--  setCombatNotes: (combatId, notes) => {
--    const newCombatNotes = { ...get().combatNotes, [combatId]: notes };
--    set({ combatNotes: newCombatNotes });
--    saveState({ ...get(), combatNotes: newCombatNotes });
--  },
--
--  setChapterInfo: (chapterInfo) => {
--    set({ chapterInfo });
--    saveState({ ...get(), chapterInfo });
--  },
--
--  setSceneMapAssignments: (assignments) => {
--    set({ sceneMapAssignments: assignments });
--    saveState({ ...get(), sceneMapAssignments: assignments });
--  },
--
--  // Remove/unassign map from scene
--  removeMapFromScene: (sceneId) => {
--    const newAssignments = { ...get().sceneMapAssignments };
--    delete newAssignments[sceneId];
--    set({ sceneMapAssignments: newAssignments });
--    saveState({ ...get(), sceneMapAssignments: newAssignments });
--  },
-+  ...initialState,
-+
-+  setCampaignNotes: (notes) => {
-+    set({ campaignNotes: notes });
-+    saveState({ ...get(), campaignNotes: notes });
-+  },
-+
-+  setSceneNotes: (sceneId, notes) => {
-+    const newSceneNotes = { ...get().sceneNotes, [sceneId]: notes };
-+    set({ sceneNotes: newSceneNotes });
-+    saveState({ ...get(), sceneNotes: newSceneNotes });
-+  },
-+
-+  setCombatNotes: (combatId, notes) => {
-+    const newCombatNotes = { ...get().combatNotes, [combatId]: notes };
-+    set({ combatNotes: newCombatNotes });
-+    saveState({ ...get(), combatNotes: newCombatNotes });
-+  },
-+
-+  setChapterInfo: (chapterInfo) => {
-+    set({ chapterInfo });
-+    saveState({ ...get(), chapterInfo });
-+  },
-+
-+  setSceneMapAssignments: (assignments) => {
-+    set({ sceneMapAssignments: assignments });
-+    saveState({ ...get(), sceneMapAssignments: assignments });
-+  },
-+
-+  // Remove/unassign map from scene
-+  removeMapFromScene: (sceneId) => {
-+    const newAssignments = { ...get().sceneMapAssignments };
-+    delete newAssignments[sceneId];
-+    set({ sceneMapAssignments: newAssignments });
-+    saveState({ ...get(), sceneMapAssignments: newAssignments });
-+  },
-+
-+  // Add new maps to availableMaps array (avoid duplicates)
-+  addAvailableMaps: (newMaps) => {
-+    const currentMaps = get().availableMaps || [];
-+    const combined = Array.from(new Set([...currentMaps, ...newMaps]));
-+    set({ availableMaps: combined });
-+    saveState({ ...get(), availableMaps: combined });
-+  },
- }));
-
- function saveState(state) {
-   try {
--    const serialized = JSON.stringify(state);
--    localStorage.setItem(STORAGE_KEY, serialized);
--  } catch {
--    // Ignore write errors
--  }
-+    const serialized = JSON.stringify(state);
-+    localStorage.setItem(STORAGE_KEY, serialized);
-+  } catch {
-+    // Ignore write errors
-+  }
- }
-
- export default useDmModuleStore;
-+
-diff --git a/src/pages/DmModule.jsx b/src/pages/DmModule.jsx
-index 123abc4..456def7 100644
---- a/src/pages/DmModule.jsx
-+++ b/src/pages/DmModule.jsx
-@@ -1,52 +1,78 @@
--import React, { useState } from 'react';
--import useDmModuleStore from '../store/dmModuleStore';
--import useSceneStore from '../store/sceneStore';
--import useCombatStore from '../store/combatStore';
--
--const DmModule = () => {
--  const {
--    campaignNotes,
--    sceneNotes,
--    combatNotes,
--    chapterInfo,
--    sceneMapAssignments = {},
--    setCampaignNotes,
--    setSceneNotes,
--    setCombatNotes,
--    setSceneMapAssignments,
--  } = useDmModuleStore();
--
--  const { scenes } = useSceneStore();
--  const { combatants } = useCombatStore();
--
--  const [selectedFile, setSelectedFile] = useState(null);
--  const [uploading, setUploading] = useState(false);
--  const [extractedMaps, setExtractedMaps] = useState([]);
--  const [exportJson, setExportJson] = useState('');
--
--  // Upload PDF and extract maps
--  const handleFileChange = (e) => {
--    setSelectedFile(e.target.files[0]);
--  };
--
--  const uploadPdf = async () => {
--    if (!selectedFile) return alert('Please select a PDF file first.');
--
--    setUploading(true);
--    const formData = new FormData();
--    formData.append('pdf', selectedFile);
--
--    try {
--      const response = await fetch('http://localhost:4000/extract-maps', {
--        method: 'POST',
--        body: formData,
--      });
--
--      if (!response.ok) throw new Error('Upload failed');
--
--      const data = await response.json();
--      setExtractedMaps(data.maps);
--      // Add new extracted maps to assignments (optional, or manage separately)
--      // For now just show them here; assign in SceneManager
--    } catch (error) {
--      alert('Error uploading or extracting maps: ' + error.message);
--    } finally {
--      setUploading(false);
--      setSelectedFile(null);
--    }
--  };
--
--  const handleExport = () => {
--    const exportData = {
--      sceneMapAssignments,
--      campaignNotes,
--      sceneNotes,
--      combatNotes,
--      chapterInfo,
--    };
--    setExportJson(JSON.stringify(exportData, null, 2));
--  };
--
--  const handleClearExport = () => {
--    setExportJson('');
--  };
--
--  return (
--    <div className="bg-parchment text-ink p-6 min-h-screen max-w-6xl mx-auto">
--      <h1 className="text-4xl font-bold mb-6">üõ°Ô∏è DM Module Dashboard</h1>
--
--      {/* Chapter Info */}
--      <section className="mb-8 bg-white/80 border border-ink rounded p-4">
--        <h2 className="text-3xl font-semibold mb-3">Chapter Info</h2>
--        <h3 className="font-bold text-xl mb-2">{chapterInfo.title}</h3>
--        <p className="mb-4 whitespace-pre-line">{chapterInfo.summary}</p>
--        <blockquote className="italic text-sm text-gray-700">‚Äú{chapterInfo.flavorText}‚Äù</blockquote>
--      </section>
--
--      {/* Campaign Notes */}
--      <section className="mb-8 bg-white/80 border border-ink rounded p-4">
--        <h2 className="text-3xl font-semibold mb-3">Campaign Notes</h2>
--        <textarea
--          className="w-full p-2 border border-gray-300 rounded resize-y min-h-[120px]"
--          placeholder="Enter campaign-wide DM notes here..."
--          value={campaignNotes}
--          onChange={(e) => setCampaignNotes(e.target.value)}
--        />
--      </section>
--
--      {/* Scene Notes */}
--      <section className="mb-8 bg-white/80 border border-ink rounded p-4">
--        <h2 className="text-3xl font-semibold mb-3">Scene Notes</h2>
--        <textarea
--          className="w-full p-2 border border-gray-300 rounded resize-y min-h-[120px]"
--          placeholder="Enter notes for the active scene here..."
--          value={sceneNotes}
--          onChange={(e) => setSceneNotes(e.target.value)}
--        />
--      </section>
--
--      {/* Combat Notes */}
--      <section className="mb-8 bg-white/80 border border-ink rounded p-4">
--        <h2 className="text-3xl font-semibold mb-3">Combat Notes</h2>
--        <textarea
--          className="w-full p-2 border border-gray-300 rounded resize-y min-h-[120px]"
--          placeholder="Enter notes for the active combat encounter here..."
--          value={combatNotes}
--          onChange={(e) => setCombatNotes(e.target.value)}
--        />
--      </section>
--
--      {/* PDF Upload and map extraction */}
--      <section className="mb-8 bg-white/80 border border-ink rounded p-4">
--        <h2 className="text-3xl font-semibold mb-3">Upload Chapter PDF to Extract Maps</h2>
--        <input type="file" accept="application/pdf" onChange={handleFileChange} />
--        <button
--          onClick={uploadPdf}
--          disabled={uploading || !selectedFile}
--          className="mt-2 px-4 py-2 bg-ink text-parchment rounded hover:bg-soul transition"
--        >
--          {uploading ? 'Uploading...' : 'Upload & Extract Maps'}
--        </button>
--
--        {extractedMaps.length > 0 && (
--          <>
--            <h3 className="mt-4 font-semibold">Extracted Maps (Assign in Scene Manager)</h3>
--            <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mt-2 max-h-96 overflow-auto">
--              {extractedMaps.map((url) => (
--                <div key={url} className="border border-ink rounded p-2">
--                  <img
--                    src={`http://localhost:4000${url}`}
--                    alt="Extracted Map"
--                    className="max-w-full max-h-48 object-contain"
--                  />
--                  <p className="text-center mt-1 text-sm truncate">{url.split('/').pop()}</p>
--                </div>
--              ))}
--            </div>
--          </>
--        )}
--      </section>
--
--      {/* Map Assignments List */}
--      <section className="mb-8 bg-white/80 border border-ink rounded p-4">
--        <h2 className="text-3xl font-semibold mb-3">Map Assignments</h2>
--        {Object.keys(sceneMapAssignments).length > 0 ? (
--          <ul>
--            {Object.entries(sceneMapAssignments).map(([sceneId, mapUrl]) => (
--              <li key={sceneId} className="mb-2">
--                <strong>Scene ID:</strong> {sceneId} <br />
--                <img
--                  src={mapUrl.startsWith('http') ? mapUrl : `http://localhost:4000${mapUrl}`}
--                  alt={`Map for scene ${sceneId}`}
--                  className="max-w-xs max-h-48 object-contain border border-ink rounded mt-1"
--                />
--              </li>
--            ))}
--          </ul>
--        ) : (
--          <p>No map assignments yet.</p>
--        )}
--      </section>
--
--      {/* Export JSON */}
--      <section className="mb-8 bg-white/80 border border-ink rounded p-4">
--        <h2 className="text-3xl font-semibold mb-3">Export DM Data as JSON</h2>
--        <button
--          onClick={() => {
--            const exportData = {
--              sceneMapAssignments,
--              campaignNotes,
--              sceneNotes,
--              combatNotes,
--              chapterInfo,
--            };
--            alert('Copy the JSON from the box below to save your data.');
--            setExportJson(JSON.stringify(exportData, null, 2));
--          }}
--          className="mb-4 px-4 py-2 bg-ink text-parchment rounded hover:bg-soul transition"
--        >
--          Generate JSON Export
--        </button>
--        {exportJson && (
--          <>
--            <pre className="bg-gray-100 p-4 rounded overflow-auto max-h-64 whitespace-pre-wrap">{exportJson}</pre>
--            <button
--              onClick={() => setExportJson('')}
--              className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
--            >
--              Clear Export
--            </button>
--          </>
--        )}
--      </section>
--    </div>
--  );
--};
--
--export default DmModule;
-+import React, { useState } from 'react';
-+import useDmModuleStore from '../store/dmModuleStore';
-+import useSceneStore from '../store/sceneStore';
-+import useCombatStore from '../store/combatStore';
-+
-+const DmModule = () => {
-+  const {
-+    campaignNotes,
-+    sceneNotes,
-+    combatNotes,
-+    chapterInfo,
-+    sceneMapAssignments = {},
-+    availableMaps = [],
-+    setCampaignNotes,
-+    setSceneNotes,
-+    setCombatNotes,
-+    setSceneMapAssignments,
-+    addAvailableMaps,
-+  } = useDmModuleStore();
-+
-+  const { scenes } = useSceneStore();
-+  const { combatants } = useCombatStore();
-+
-+  const [selectedFile, setSelectedFile] = useState(null);
-+  const [uploading, setUploading] = useState(false);
-+  const [extractedMaps, setExtractedMaps] = useState([]);
-+  const [exportJson, setExportJson] = useState('');
-+
-+  // Upload PDF and extract maps
-+  const handleFileChange = (e) => {
-+    setSelectedFile(e.target.files[0]);
-+  };
-+
-+  const uploadPdf = async () => {
-+    if (!selectedFile) return alert('Please select a PDF file first.');
-+
-+    setUploading(true);
-+    const formData = new FormData();
-+    formData.append('pdf', selectedFile);
-+
-+    try {
-+      const response = await fetch('http://localhost:4000/extract-maps', {
-+        method: 'POST',
-+        body: formData,
-+      });
-+
-+      if (!response.ok) throw new Error('Upload failed');
-+
-+      const data = await response.json();
-+      setExtractedMaps(data.maps);
-+      addAvailableMaps(data.maps);
-+    } catch (error) {
-+      alert('Error uploading or extracting maps: ' + error.message);
-+    } finally {
-+      setUploading(false);
-+      setSelectedFile(null);
-+    }
-+  };
-+
-+  const handleExport = () => {
-+    const exportData = {
-+      sceneMapAssignments,
-+      campaignNotes,
-+      sceneNotes,
-+      combatNotes,
-+      chapterInfo,
-+      availableMaps,
-+    };
-+    setExportJson(JSON.stringify(exportData, null, 2));
-+  };
-+
-+  const handleClearExport = () => {
-+    setExportJson('');
-+  };
-+
-+  return (
-+    <div className="bg-parchment text-ink p-6 min-h-screen max-w-6xl mx-auto">
-+      <h1 className="text-4xl font-bold mb-6">üõ°Ô∏è DM Module Dashboard</h1>
-+
-+      {/* Chapter Info */}
-
diff --git a/repo-maintenance.sh b/repo-maintenance.sh
deleted file mode 100644
index a359101..0000000
--- a/repo-maintenance.sh
+++ /dev/null
@@ -1,93 +0,0 @@
-#!/bin/bash
-
-# REAPER project expected files (relative to repo root)
-EXPECTED_FILES=(
-  "package.json"
-  "tailwind.config.js"
-  "postcss.config.js"
-  ".gitignore"
-  "public/index.html"
-  "src/index.js"
-  "src/index.css"
-  "src/App.jsx"
-  "src/pages/CampaignDashboard.jsx"
-  "src/pages/SceneManager.jsx"
-  "src/pages/CombatTracker.jsx"
-)
-
-echo "Running REAPER repo maintenance..."
-
-# --------- Repo Check ---------
-MISSING=()
-for file in "${EXPECTED_FILES[@]}"
-do
-  if [ ! -f "$file" ]; then
-    MISSING+=("$file")
-  fi
-done
-
-if [ ${#MISSING[@]} -eq 0 ]; then
-  echo "‚úÖ All expected files are present."
-else
-  echo "‚ö†Ô∏è Missing files:"
-  for f in "${MISSING[@]}"; do
-    echo "  - $f"
-  done
-fi
-
-echo ""
-echo "Checking for unexpected files in src and public folders..."
-
-ALL_FILES=$(find src public -type f | sort)
-
-UNEXPECTED=()
-for f in $ALL_FILES
-do
-  found=false
-  for e in "${EXPECTED_FILES[@]}"
-  do
-    if [ "$f" == "$e" ]; then
-      found=true
-      break
-    fi
-  done
-  if ! $found; then
-    UNEXPECTED+=("$f")
-  fi
-done
-
-if [ ${#UNEXPECTED[@]} -eq 0 ]; then
-  echo "‚úÖ No unexpected files found."
-else
-  echo "‚ö†Ô∏è Unexpected files found:"
-  for f in "${UNEXPECTED[@]}"; do
-    echo "  - $f"
-  done
-fi
-
-echo ""
-read -p "Do you want to clean the repo (delete all files except .git and this script)? (y/n): " yn
-if [[ "$yn" =~ ^[Yy]$ ]]; then
-  echo "Cleaning repo..."
-  shopt -s extglob
-  rm -rf !( .git | repo-maintenance.sh )
-  echo "Repo cleaned."
-  
-  # Check if repo_package exists
-  if [ -d "repo_package" ]; then
-    echo "Copying fresh files from repo_package/ ..."
-    cp -r repo_package/* .
-    echo "Files copied."
-  else
-    echo "Warning: repo_package/ folder not found. Skipping copy."
-  fi
-
-  echo "Running npm install ..."
-  npm install
-  echo "Setup complete."
-else
-  echo "Cleanup aborted."
-fi
-
-echo "REAPER repo maintenance complete."
-
diff --git a/update-files-compat.sh b/update-files-compat.sh
deleted file mode 100755
index 4ce3601..0000000
--- a/update-files-compat.sh
+++ /dev/null
@@ -1,87 +0,0 @@
-#!/bin/bash
-
-set -e
-
-echo "Updating REAPER project files with fixed CampaignDashboard.jsx..."
-
-# Create directories if missing
-mkdir -p src/store
-mkdir -p src/pages
-
-# campaignStore.js
-cat > src/store/campaignStore.js << 'EOF'
-import create from 'zustand';
-
-const useCampaignStore = create((set) => ({
-  activeChapter: 'Chapter 4: Shadow of War',
-  location: 'Kalaman',
-  partyLevel: 4,
-  plotThreads: [
-    { id: 1, text: 'Vogler evacuated', completed: true },
-    { id: 2, text: 'Red Dragon Army scouts spotted', completed: false },
-    { id: 3, text: 'Retake Wheelwatch Outpost', completed: false },
-    { id: 4, text: 'Zanas Sarlamir encountered', completed: false },
-  ],
-  npcs: ['Darrett Highwater', 'Kalaman Officers', 'Refugee Leaders'],
-
-  togglePlotThread: (id) =>
-    set((state) => ({
-      plotThreads: state.plotThreads.map((thread) =>
-        thread.id === id ? { ...thread, completed: !thread.completed } : thread
-      ),
-    })),
-}));
-
-export default useCampaignStore;
-EOF
-
-# CampaignDashboard.jsx with fixed .join(', ')
-cat > src/pages/CampaignDashboard.jsx << 'EOF'
-import React from 'react';
-import useCampaignStore from '../store/campaignStore';
-
-const CampaignDashboard = () => {
-  const { activeChapter, location, partyLevel, plotThreads, npcs, togglePlotThread } = useCampaignStore();
-
-  return (
-    <div className="bg-parchment text-ink p-6 min-h-screen">
-      <h1 className="text-4xl font-extrabold tracking-tight">REAPER: Campaign Dashboard</h1>
-      <p className="mt-2 text-lg italic">Because death is only the beginning of your session prep.</p>
-
-      <div className="mt-8 grid gap-6 md:grid-cols-2">
-        <section className="p-4 bg-white/80 border border-ink rounded-lg shadow">
-          <h2 className="text-2xl font-semibold">üìú Active Chapter</h2>
-          <p className="mt-2">{activeChapter}</p>
-          <p className="text-sm text-gray-700">Location: {location} | Party Level: {partyLevel}</p>
-        </section>
-
-        <section className="p-4 bg-white/80 border border-ink rounded-lg shadow">
-          <h2 className="text-2xl font-semibold">üß† Plot Threads</h2>
-          <ul className="mt-2 list-disc list-inside text-sm">
-            {plotThreads.map(({ id, text, completed }) => (
-              <li
-                key={id}
-                className={completed ? 'line-through text-gray-500 cursor-pointer' : 'cursor-pointer'}
-                onClick={() => togglePlotThread(id)}
-                title="Click to toggle completion"
-              >
-                {completed ? '‚òëÔ∏è' : '‚¨ú'} {text}
-              </li>
-            ))}
-          </ul>
-        </section>
-
-        <section className="p-4 bg-white/80 border border-ink rounded-lg shadow md:col-span-2">
-          <h2 className="text-2xl font-semibold">üßô NPCs in Play</h2>
-          <p className="mt-2">{npcs.join(', ')}</p>
-        </section>
-      </div>
-    </div>
-  );
-};
-
-export default CampaignDashboard;
-EOF
-
-echo "Files updated successfully with fix."
-
